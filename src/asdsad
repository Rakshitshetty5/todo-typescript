import React, { useState } from "react";
import "./App.css";

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  handleChange: React.FormEventHandler<HTMLInputElement>;
  inputFor: String;
}

const CustomInput: React.FC<InputProps> = ({
  handleChange,
  inputFor,
  ...otherProps
}) => {
  return <input className="w-[50%] h-[2.5rem] border-2 p-2" onChange={handleChange} {...otherProps} />;
};

interface ButtonProps {
  children: React.ReactNode;
  buttonFor: String;
}

const CustomButton: React.FC<ButtonProps> = ({ children, buttonFor }) => {
  return <button className="h-[2.5rem] p-0 w-[5rem] text-white bg-[green]">{children}</button>;
};
interface TodoItemType {
  title: String;
  id: Number;
}

interface TodoItemProps extends TodoItemType {
  handleDelete: (id: Number) => void;
  selectItemToEdit: (item: TodoItemType) => void;
}

const TodoItem: React.FC<TodoItemProps> = ({
  title,
  id,
  handleDelete,
  selectItemToEdit,
}) => {
  return (
    <div className="flex w-[100%] items-center justify-between bg-pink-200 py-2 px-4 rounded-xl">
      <h1 className="text-[1.2rem]">{title}</h1>
      <div className="space-x-4 flex items-center">
        <button onClick={() => selectItemToEdit({ title, id })}><i className="text-[blue] text-[1.2rem] fa fa-edit"></i></button>
        <button onClick={() => handleDelete(id)}><i className="text-[red] text-[1.2rem] fa fa-trash"></i></button>
        <button onClick={() => handleDelete(id)}><i className="text-[orange] text-[1.2rem] fa fa-strikethrough"></i></button>
      </div>
    </div>
  );
};

interface TodoItemEditProps {
  title: any;
  saveEditItem: () => void;
  cancelEdit: () => void;
  handleEditValueChange: React.FormEventHandler<HTMLInputElement>;
}

const TodoItemEdit: React.FC<TodoItemEditProps> = ({
  title,
  saveEditItem,
  cancelEdit,
  handleEditValueChange,
}) => {
  return (
    <div className="flex w-[100%] items-center justify-between bg-[blue] py-2 px-4 rounded-xl">
      <CustomInput
        handleChange={handleEditValueChange}
        value={title}
        type={"text"}
        inputFor={"editItem"}
      />
      <div className="space-x-4">
        <button className="py-2 px-4 bg-green-400" onClick={saveEditItem}>Save</button>
        <button onClick={cancelEdit}><i className="text-[red] text-[1.2rem] fa fa-close"></i></button>
      </div>
    </div>
  );
};

interface TodoListProps {
  items: TodoItemType[];
  handleDelete: (id: Number) => void;
  saveEditItem: () => void;
  cancelEdit: () => void;
  selectItemToEdit: (item: TodoItemType) => void;
  handleEditValueChange: React.FormEventHandler<HTMLInputElement>;
  itemToEdit: TodoItemType | null
}

const TodoList: React.FC<TodoListProps> = ({
  items,
  handleDelete,
  saveEditItem,
  cancelEdit,
  selectItemToEdit,
  handleEditValueChange,
  itemToEdit
}) => {
  return (
    <div className="w-[100%] space-y-5 flex flex-col items-center justify-center mt-5">
      {items.map((item: TodoItemType) => (
        <div key={item.id.toString()} className="w-[80%]">
        { 
          itemToEdit?.id !== item.id &&  <TodoItem
            selectItemToEdit={selectItemToEdit}
            handleDelete={handleDelete}
            title={item.title}
            id={item.id}
          />
        }
        { 
          itemToEdit?.id === item.id &&  <TodoItemEdit
            cancelEdit={cancelEdit}
            saveEditItem={saveEditItem}
            title={itemToEdit?.title}
            handleEditValueChange={handleEditValueChange}
          />
        }
        </div>
      ))}
    </div>
  );
};

function App() {
  const [list, setList] = useState<TodoItemType[] | []>([]);
  const [value, setValue] = useState("");
  const [itemToEdit, setItemToEdit] = useState<TodoItemType | null>(null);

  const handleValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if(!value) return
    setList((items) => [...items, { title: value, id: Math.random() }]);
    setValue("")
  };

  const handleDelete = (id: Number) =>
    setList((items) => items.filter((item) => item.id !== id));

  const saveEditItem = () => {
    if (!itemToEdit) return;
    if(!itemToEdit.title) return
    setList((items) =>
      items.map((item) => {
        if (item.id === itemToEdit.id) {
          return itemToEdit;
        }
        return item;
      })
    );
    setItemToEdit(null);
  };

  const cancelEdit = () => {
    setItemToEdit(null);
  };

  const selectItemToEdit = (item: TodoItemType) => {
    setItemToEdit(item);
  };

  const handleEditValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setItemToEdit((item) => {
      if (!item) return null;
      return { ...item, title: e.target.value };
    });
  };

  return (
    <div className="h-[100vh] flex flex-col items-center justify-center">
      <div className="p-5 min-h-[50%] min-w-[50%] flex flex-col items-center border-2 ">
        <form onSubmit={handleSubmit} className="my-5 w-[80%] flex items-center justify-center space-x-5">
          <CustomInput
            handleChange={handleValueChange}
            value={value}
            type={"text"}
            inputFor={"addItem"}
            placeholder={"Enter task..."}
          />
          <CustomButton buttonFor={"addItem"}>{"Add"}</CustomButton>
        </form>
        <TodoList
          saveEditItem={saveEditItem}
          handleEditValueChange={handleEditValueChange}
          selectItemToEdit={selectItemToEdit}
          cancelEdit={cancelEdit}
          handleDelete={handleDelete}
          items={list}
          itemToEdit={itemToEdit}
        />
      </div>
    </div>
  );
}

export default App;
